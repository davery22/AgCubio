// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Values, strings, and formula input into cells.
        ///Single circular dependency tested.
        ///Tested for invalid cells.
        ///Scrolling with scroll bars and with arrow keys, enter.
        /// </summary>
        public void GeneralUseTest1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIText_EditorEdit = this.UISpreadsheetWindow.UIEntercellcontentsWindow.UIText_EditorEdit;
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinControl uIWarningDialog = this.UIWarningWindow.UIWarningDialog;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIWarningWindow.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.GeneralUseTest1Params.UISpreadsheetWindowExePath, this.GeneralUseTest1Params.UISpreadsheetWindowAlternateExePath);

            // Type '1' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText;

            // Type '2' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText1;

            // Type '3' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText2;

            // Type '4' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys3, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText3;

            // Type '5' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys4, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText4;

            // Type '6' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys5, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText5;

            // Type '7' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys6, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText6;

            // Type '8' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys7, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText7;

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(145, 73));

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys8, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText8;

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys9, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText9;

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys10, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText10;

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys11, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText11;

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys12, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText12;

            // Move 'menuStrip1' window to list box
            uIItemList.EnsureClickable(new Point(1006, 563));
            Mouse.StartDragging(uIMenuStrip1Window, new Point(583, 69));
            Mouse.StopDragging(uIItemList, new Point(1006, 563));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(547, 242));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(376, 254));

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText13;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(71, 204));

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText14;

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys13, ModifierKeys.None);

            // Type '=a72' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText15;

            // Type '{Enter}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.GeneralUseTest1Params.UIText_EditorEditSendKeys, ModifierKeys.None);

            // Click 'Warning' Dialog
            Mouse.Click(uIWarningDialog, new Point(102, 15));

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys14, ModifierKeys.None);

            // Type '=a20' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText16;

            // Type '{Enter}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.GeneralUseTest1Params.UIText_EditorEditSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.GeneralUseTest1Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys15, ModifierKeys.None);

            // Type '=a100' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText17;

            // Type '{Enter}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.GeneralUseTest1Params.UIText_EditorEditSendKeys2, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton1, this.GeneralUseTest1Params.UIOKButtonSendKeys1, ModifierKeys.None);

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys16, ModifierKeys.None);

            // Type '=c2' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText18;

            // Type '{Enter}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.GeneralUseTest1Params.UIText_EditorEditSendKeys3, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.GeneralUseTest1Params.UIOKButtonSendKeys2, ModifierKeys.None);

            // Type '{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Right}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys17, ModifierKeys.None);

            // Type '{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys18, ModifierKeys.None);

            // Click list box
            Mouse.Click(uIItemList, new Point(726, 193));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(624, 215));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(178, 27));

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText19;

            // Double-Click 'menuStrip1' window
            Mouse.DoubleClick(uIMenuStrip1Window, new Point(178, 27));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(178, 27));

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText20;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(700, 239));

            // Type '{NumPad5}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys19, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText21;

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys20, ModifierKeys.None);

            // Type '=i10e3' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText22;

            // Type '{Enter}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.GeneralUseTest1Params.UIText_EditorEditSendKeys4, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton1, this.GeneralUseTest1Params.UIOKButtonSendKeys3, ModifierKeys.None);

            // Type '{Up}=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.GeneralUseTest1Params.UISpreadsheetPanel1ClientSendKeys21, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.GeneralUseTest1Params.UIText_EditorEditText23;
        }
        
        /// <summary>
        /// Saved into the bin folder of the tests.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinTreeItem uIThisPCTreeItem = this.UISaveAsWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UIThisPCTreeItem;
            WinEdit uISpaceusedEdit = this.UISaveAsWindow.UIItemWindow.UILocalDiskCListItem.UISpaceusedEdit;
            WinEdit uINameEdit = this.UISaveAsWindow.UIItemWindow1.UIUsersListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UISaveAsWindow.UIItemWindow2.UIKearsaListItem.UINameEdit;
            WinEdit uINameEdit2 = this.UISaveAsWindow.UIItemWindow3.UISourceListItem.UINameEdit;
            WinList uIItemsViewList = this.UISaveAsWindow.UIItemsViewWindow.UIItemsViewList;
            WinEdit uINameEdit3 = this.UISaveAsWindow.UIItemWindow4.UIReposListItem.UINameEdit;
            WinEdit uINameEdit4 = this.UISaveAsWindow.UIItemWindow5.UIDaniel_AveryListItem.UINameEdit;
            WinEdit uINameEdit5 = this.UISaveAsWindow.UIItemWindow6.UIPS4ListItem.UINameEdit;
            WinEdit uINameEdit6 = this.UISaveAsWindow.UIItemWindow7.UISpreadsheetTestsListItem.UINameEdit;
            WinEdit uINameEdit7 = this.UISaveAsWindow.UIItemWindow8.UIBinListItem.UINameEdit;
            WinEdit uINameEdit8 = this.UISaveAsWindow.UIItemWindow9.UIDebugListItem.UINameEdit;
            WinTree uITreeViewTree = this.UISaveAsWindow.UITreeViewWindow1.UITreeViewTree;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow10.UIFilenameEdit;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(54, 14));

            // Click 'Desktop' -> 'This PC' tree item
            Mouse.Click(uIThisPCTreeItem, new Point(16, 19));

            // Double-Click 'Space used' text box
            Mouse.DoubleClick(uISpaceusedEdit, new Point(45, 2));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(24, 15));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(39, 12));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit2, new Point(39, 15));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(74, 75));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit3, new Point(36, 8));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit4, new Point(36, 14));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit5, new Point(23, 7));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit6, new Point(64, 9));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit7, new Point(9, 19));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit8, new Point(26, 13));

            // Click 'Tree View' tree
            Mouse.Click(uITreeViewTree, new Point(175, 276));

            // Select 'FirstTest.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod1Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod1Params.UIFilenameEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Open a previously saved file.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIFirstTestsprdListItem.UINameEdit;
            WinListItem uIFirstTestsprdListItem = this.UIOpenWindow.UIItemWindow.UIItemsViewList.UIFirstTestsprdListItem;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(51, 6));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(40, 20));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(40, 20));

            // Click 'FirstTest.sprd' list item
            Mouse.Click(uIFirstTestsprdListItem, new Point(62, 20));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(40, 20));
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(704, 270));

            // Type '{Up}{Delete}{Up}{Delete}{Up}{Delete}{Left}{Delete}{Down}{Delete}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Right}{Delete}{Down}{Delete}{Down}{Delete}{Down}{Delete}{Down}{Delete}{Down}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod3Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Set some values, change color schemes, open a new window, close windows.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            WinEdit uIText_EditorEdit = this.UISpreadsheetWindow.UIEntercellcontentsWindow.UIText_EditorEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinControl uIWarningDialog = this.UIWarningWindow.UIWarningDialog;
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinWindow uIItemWindow1 = this.UIItemWindow1;
            WinWindow uIEntercellcontentsWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UIEntercellcontentsWindow;
            WinWindow uIItemWindow11 = this.UIItemWindow11;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinEdit uIText_EditorEdit1 = this.UISpreadsheetWindow1.UIEntercellcontentsWindow.UIText_EditorEdit;
            WinClient uISpreadsheetPanel1Client2 = this.UISpreadsheetWindow1.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinMenuItem uICloseMenuItem1 = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinWindow uISpreadsheetWindow1 = this.UISpreadsheetWindow;
            WinTree uITreeViewTree = this.UISaveAsWindow.UITreeViewWindow1.UITreeViewTree;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow10.UIFilenameEdit;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod4Params.UISpreadsheetWindowExePath, this.RecordedMethod4Params.UISpreadsheetWindowAlternateExePath);

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(104, 31));

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.RecordedMethod4Params.UIText_EditorEditText;

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod4Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '=a3' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.RecordedMethod4Params.UIText_EditorEditText1;

            // Type '{Enter}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.RecordedMethod4Params.UIText_EditorEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedMethod4Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '5' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod4Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.RecordedMethod4Params.UIText_EditorEditText2;

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(58, 4));

            // Click 'Warning' Dialog
            Mouse.Click(uIWarningDialog, new Point(122, 14));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(13, 7));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(112, 42));

            // Click 'Text_Editor' text box
            Mouse.Click(uIText_EditorEdit, new Point(260, 15));

            // Click 'Text_Editor' text box
            Mouse.Click(uIText_EditorEdit, new Point(393, 15));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(15, 19));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(107, 31));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(307, 37));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(405, 128));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(23, 2));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(110, 32));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(250, 36));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(190, 54));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(12, 17));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(125, 32));

            // Click 'Enter cell contents' window
            Mouse.Click(uIEntercellcontentsWindow, new Point(271, 18));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(390, 74));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(23, 10));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(123, 36));

            // Click window
            Mouse.Click(uIItemWindow11, new Point(223, 26));

            // Click 'Text_Editor' text box
            Mouse.Click(uIText_EditorEdit, new Point(280, 8));

            // Click 'Text_Editor' text box
            Mouse.Click(uIText_EditorEdit, new Point(392, 6));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(10, 9));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(67, 37));

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit1.Text = this.RecordedMethod4Params.UIText_EditorEditText3;

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client2, this.RecordedMethod4Params.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.None);

            // Type '=a5 + 3 / 5 * 9' in 'Text_Editor' text box
            uIText_EditorEdit1.Text = this.RecordedMethod4Params.UIText_EditorEditText4;

            // Type '{Enter}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit1, this.RecordedMethod4Params.UIText_EditorEditSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedMethod4Params.UIOKButtonSendKeys1, ModifierKeys.None);

            // Type '{Enter}{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client2, this.RecordedMethod4Params.UISpreadsheetPanel1ClientSendKeys3, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit1.Text = this.RecordedMethod4Params.UIText_EditorEditText5;

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem1, new Point(62, 12));

            // Click 'Warning' Dialog
            Mouse.Click(uIWarningDialog, new Point(34, 13));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(58, 7));

            // Click 'Spreadsheet' window
            Mouse.Click(uISpreadsheetWindow1, new Point(654, 449));

            // Click 'Tree View' tree
            Mouse.Click(uITreeViewTree, new Point(173, 276));

            // Select 'SecondTestMethod.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod4Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod4Params.UIFilenameEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Navigating spreadsheet and clicking on options
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinWindow uIItemWindow = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UIItemWindow;
            WinWindow uISpreadsheetWindow1 = this.UISpreadsheetWindow;
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            WinWindow uIUnhandledexceptionhaWindow = this.UISpreadsheetWindow1.UISpreadsheetClient.UIUnhandledexceptionhaWindow;
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem;
            WinWindow uIItemWindow11 = this.UIItemWindow11;
            WinEdit uIText_EditorEdit = this.UISpreadsheetWindow.UIEntercellcontentsWindow.UIText_EditorEdit;
            WinWindow uIItemWindow1 = this.UIItemWindow1;
            WinMenuBar uIMenuStrip1MenuBar = this.UISpreadsheetWindow.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinMenuItem uIAboutSpreadsheetMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIAboutSpreadsheetMenuItem;
            WinButton uICloseButton = this.UIViewDownloadsInterneWindow.UIViewDownloadsInterneTitleBar.UICloseButton;
            WinMenuItem uIRequestSupportMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIRequestSupportMenuItem;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow10.UIFilenameEdit;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod5Params.UISpreadsheetWindowExePath, this.RecordedMethod5Params.UISpreadsheetWindowAlternateExePath);

            // Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod5Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(256, 163));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(118, 78));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(441, 120));

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(591, 81));
            Mouse.StopDragging(uIItemWindow, 1, -34);

            // Move window to 'Spreadsheet' window
            uISpreadsheetWindow1.EnsureClickable(new Point(612, 76));
            Mouse.StartDragging(uIItemWindow, new Point(592, 47));
            Mouse.StopDragging(uISpreadsheetWindow1, new Point(612, 76));

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(200, 312));
            Mouse.StopDragging(uIItemWindow, -155, -7);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(441, 69));

            // Move window to 'menuStrip1' window
            uIMenuStrip1Window.EnsureClickable(new Point(581, 27));
            Mouse.StartDragging(uIItemWindow, new Point(586, 73));
            Mouse.StopDragging(uIMenuStrip1Window, new Point(581, 27));

            // Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod5Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(592, 77));
            Mouse.StopDragging(uIItemWindow, 3, 136);

            // Type '{Down}{Up}{Down}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod5Params.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.None);

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(95, 315));
            Mouse.StopDragging(uIItemWindow, 253, 7);

            // Type '{Left}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod5Params.UISpreadsheetPanel1ClientSendKeys3, ModifierKeys.None);

            // Click 'Unhandled exception has occurred in your applicati...' window
            Mouse.Click(uIUnhandledexceptionhaWindow, new Point(221, 126));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(350, 237));

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(340, 319));
            Mouse.StopDragging(uIItemWindow, -335, -302);

            // Type '{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod5Params.UISpreadsheetPanel1ClientSendKeys4, ModifierKeys.None);

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(22, 9));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(97, 29));

            // Click window
            Mouse.Click(uIItemWindow11, new Point(209, 22));

            // Click 'Text_Editor' text box
            Mouse.Click(uIText_EditorEdit, new Point(398, 12));

            // Move 'Help' menu item to 'menuStrip1' window
            uIMenuStrip1Window.EnsureClickable(new Point(89, 34));
            Mouse.StartDragging(uIHelpMenuItem, new Point(22, 15));
            Mouse.StopDragging(uIMenuStrip1Window, new Point(89, 34));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(89, 34));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(301, 29));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(162, 38));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(14, 10));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(94, 34));

            // Click 'Text_Editor' text box
            Mouse.Click(uIText_EditorEdit, new Point(270, 6));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(382, 65));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(2, 17));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(92, 40));

            // Click 'Text_Editor' text box
            Mouse.Click(uIText_EditorEdit, new Point(285, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(412, 92));

            // Move 'Help' menu item to 'menuStrip1' window
            uIMenuStrip1Window.EnsureClickable(new Point(92, 24));
            Mouse.StartDragging(uIHelpMenuItem, new Point(20, 6));
            Mouse.StopDragging(uIMenuStrip1Window, new Point(92, 24));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(92, 24));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(301, 36));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(414, 73));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(19, 5));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(111, 28));

            // Click 'Text_Editor' text box
            Mouse.Click(uIText_EditorEdit, new Point(278, 9));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(411, 123));

            // Double-Click 'menuStrip1' menu bar
            Mouse.DoubleClick(uIMenuStrip1MenuBar, new Point(64, 22));

            // Click 'Help' -> 'About Spreadsheet' menu item
            Mouse.Click(uIAboutSpreadsheetMenuItem, new Point(73, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 13));

            // Move 'Help' menu item to 'Help' -> 'Request Support' menu item
            uIRequestSupportMenuItem.EnsureClickable(new Point(45, 14));
            Mouse.StartDragging(uIHelpMenuItem, new Point(19, 15));
            Mouse.StopDragging(uIRequestSupportMenuItem, new Point(45, 14));

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(29, 12));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(48, 37));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(44, 8));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(46, 11));

            // Click 'Spreadsheet' window
            Mouse.Click(uISpreadsheetWindow1, new Point(744, 45));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(52, 7));

            // Type 'Alt + {F4}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod5Params.UIFilenameEditSendKeys, ModifierKeys.Alt);

            // Type 'Alt + {F4}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.RecordedMethod5Params.UIText_EditorEditSendKeys, ModifierKeys.Alt);
        }
        
        /// <summary>
        /// Arrow key navigation, some mouse input.
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
            ApplicationUnderTest spreadSheetGUIApplication = ApplicationUnderTest.Launch(this.RecordedMethod6Params.ExePath, this.RecordedMethod6Params.AlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(358, 178));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(126, 87));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(59, 53));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(204, 228));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(444, 149));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(427, 294));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(266, 81));

            // Type '{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod6Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Right}{Right}{Right}{Right}{Right}{Right}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod6Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Maximized screen. I hope it helps these methods.
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinWindow uIItemWindow = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UIItemWindow;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinList uIItemsViewList = this.UIOpenWindow.UIItemsViewWindow.UIItemsViewList;
            WinButton uIMaximizeButton = this.UISpreadsheetWindow1.UISpreadsheetTitleBar.UIMaximizeButton;
            WinButton uICloseButton = this.UISpreadsheetWindow1.UISpreadsheetTitleBar.UICloseButton;
            WinEdit uIText_EditorEdit = this.UISpreadsheetWindow.UIEntercellcontentsWindow.UIText_EditorEdit;
            WinEdit uIText_EditorEdit1 = this.UISpreadsheetWindow1.UIEntercellcontentsWindow.UIText_EditorEdit;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinControl uIWarningDialog = this.UIWarningWindow.UIWarningDialog;
            #endregion

            // Click list box
            Mouse.Click(uIItemList, new Point(1110, 322));

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(1524, 576));
            Mouse.StopDragging(uIItemWindow, -38, -472);

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(103, 767));
            Mouse.StopDragging(uIItemWindow, -91, -14);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 50));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(35, 11));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(45, 17));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(529, 360));

            // Click 'Maximize' button
            Mouse.Click(uIMaximizeButton, new Point(23, 21));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 9));

            // Type 'Control + n' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.RecordedMethod7Params.UIText_EditorEditSendKeys, ModifierKeys.Control);

            // Type 'Alt + {F4}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit1, this.RecordedMethod7Params.UIText_EditorEditSendKeys1, ModifierKeys.Alt);

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(19, 17));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(137, 227));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(61, 51));

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod7Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '=a5' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.RecordedMethod7Params.UIText_EditorEditText;

            // Type '{Enter}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.RecordedMethod7Params.UIText_EditorEditSendKeys2, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedMethod7Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}{Enter}{Enter}3' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod7Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.RecordedMethod7Params.UIText_EditorEditText1;

            // Type 'Alt + {F4}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.RecordedMethod7Params.UIText_EditorEditSendKeys3, ModifierKeys.Alt);

            // Click 'Warning' Dialog
            Mouse.Click(uIWarningDialog, new Point(31, 12));
        }
        
        /// <summary>
        /// No values input. Only navigations.
        /// </summary>
        public void RecordedMethod8()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinWindow uIItemWindow = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UIItemWindow;
            WinButton uIENGButton = this.UITrayInputIndicatorWindow.UIItemWindow.UIENGButton;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinEdit uIText_EditorEdit = this.UISpreadsheetWindow1.UIEntercellcontentsWindow.UIText_EditorEdit;
            WinMenuItem uIEasterEggsMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIEasterEggsMenuItem;
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            WinEdit uIText_EditorEdit1 = this.UISpreadsheetWindow.UIEntercellcontentsWindow.UIText_EditorEdit;
            WinWindow uIItemWindow11 = this.UIItemWindow11;
            WinMenuItem uIBackgroundMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIEasterEggsMenuItem.UIBackgroundMenuItem;
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem;
            WinWindow uIItemWindow1 = this.UIItemWindow1;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod8Params.UISpreadsheetWindowExePath, this.RecordedMethod8Params.UISpreadsheetWindowAlternateExePath);

            // Click list box
            Mouse.Click(uIItemList, new Point(658, 142));

            // Type '{Down}{Right}{Down}{Left}{Right}{Up}{Right}{Up}{Right}{Up}{Right}{Up}{Left}{Left}{Left}{Left}{Left}{Down}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Left}{Left}{Left}{Left}{Left}{Left}{Up}{Up}{Up}{Up}{Up}{Up}{Right}{Right}{Up}{Left}{Right}{Up}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod8Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '{Right}{Up}{Right}{Up}{Right}{Up}{Left}{Right}{Up}{Left}{Right}{Up}{Left}{Right}{Up}{Left}{Right}{Left}{Right}{Down}{Left}{Right}{Down}{Right}{Up}{Left}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod8Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(705, 735));

            // Type '{Down}{Down}{Down}{Down}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod8Params.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(1450, 538));

            // Type '{Right}{Right}{Right}{Right}{Right}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod8Params.UISpreadsheetPanel1ClientSendKeys3, ModifierKeys.None);

            // Move window to 'ENG' button
            uIENGButton.EnsureClickable(new Point(39, 49));
            Mouse.StartDragging(uIItemWindow, new Point(1522, 271));
            Mouse.StopDragging(uIENGButton, new Point(39, 49));

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(1526, 243));
            Mouse.StopDragging(uIItemWindow, 4, 449);

            // Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod8Params.UISpreadsheetPanel1ClientSendKeys4, ModifierKeys.None);

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(1531, 644));
            Mouse.StopDragging(uIItemWindow, 0, -338);

            // Type '{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod8Params.UISpreadsheetPanel1ClientSendKeys5, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(359, 491));

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(382, 773));
            Mouse.StopDragging(uIItemWindow, -382, -27);

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(901, 771));
            Mouse.StopDragging(uIItemWindow, 796, 207);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(1286, 581));

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(1134, 775));
            Mouse.StopDragging(uIItemWindow, -618, -4);

            // Type '{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod8Params.UISpreadsheetPanel1ClientSendKeys6, ModifierKeys.None);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(44, 16));

            // Type 'Alt + {F4}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.RecordedMethod8Params.UIText_EditorEditSendKeys, ModifierKeys.Alt);

            // Click 'Help' -> 'Easter Eggs' menu item
            Mouse.Click(uIEasterEggsMenuItem, new Point(60, 13));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(290, 32));

            // Click 'Text_Editor' text box
            Mouse.Click(uIText_EditorEdit1, new Point(388, 5));

            // Click 'Help' -> 'Easter Eggs' menu item
            Mouse.Click(uIEasterEggsMenuItem, new Point(69, 13));

            // Click window
            Mouse.Click(uIItemWindow11, new Point(221, 14));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(418, 132));

            // Click 'Help' -> 'Easter Eggs' menu item
            Mouse.Click(uIEasterEggsMenuItem, new Point(65, 14));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(292, 32));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(407, 112));

            // Click 'Help' -> 'Easter Eggs' -> 'Background' menu item
            Mouse.Click(uIBackgroundMenuItem, new Point(63, 14));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(430, 79));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(21, 9));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(110, 31));

            // Click 'Text_Editor' text box
            Mouse.Click(uIText_EditorEdit1, new Point(295, 1));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(407, 59));

            // Move 'Help' menu item to 'menuStrip1' window
            uIMenuStrip1Window.EnsureClickable(new Point(95, 27));
            Mouse.StartDragging(uIHelpMenuItem, new Point(25, 9));
            Mouse.StopDragging(uIMenuStrip1Window, new Point(95, 27));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(95, 27));

            // Click 'Help' -> 'Easter Eggs' -> 'Background' menu item
            Mouse.Click(uIBackgroundMenuItem, new Point(83, 10));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(187, 35));

            // Click 'Help' -> 'Easter Eggs' menu item
            Mouse.Click(uIEasterEggsMenuItem, new Point(65, 13));

            // Click window
            Mouse.Click(uIItemWindow11, new Point(227, 17));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(171, 13));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(18, 10));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(61, 13));
        }
        
        /// <summary>
        /// All done with the keyboard.
        /// </summary>
        public void RecordedMethod9()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uIEasterEggsMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIEasterEggsMenuItem;
            WinMenuItem uIWhiteMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIEasterEggsMenuItem1.UIBackgroundMenuItem.UIWhiteMenuItem;
            WinEdit uIText_EditorEdit = this.UISpreadsheetWindow.UIEntercellcontentsWindow.UIText_EditorEdit;
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem;
            WinMenuItem uIRedMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIEasterEggsMenuItem1.UIBackgroundMenuItem.UIRedMenuItem;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod9Params.UISpreadsheetWindowExePath, this.RecordedMethod9Params.UISpreadsheetWindowAlternateExePath);

            // Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod9Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Right}{Right}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{LMenu}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod9Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Type '{Right}' in 'File' menu item
            Keyboard.SendKeys(uIFileMenuItem, this.RecordedMethod9Params.UIFileMenuItemSendKeys, ModifierKeys.None);

            // Click 'Help' -> 'Easter Eggs' menu item
            Mouse.Click(uIEasterEggsMenuItem, new Point(0, 0));

            // Click 'Help' -> 'Easter Eggs' -> 'Background' -> 'White' menu item
            Mouse.Click(uIWhiteMenuItem, new Point(0, 0));

            // Type '{LMenu}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.RecordedMethod9Params.UIText_EditorEditSendKeys, ModifierKeys.None);

            // Type '{Right}' in 'File' menu item
            Keyboard.SendKeys(uIFileMenuItem, this.RecordedMethod9Params.UIFileMenuItemSendKeys1, ModifierKeys.None);

            // Type '{Right}' in 'Help' menu item
            Keyboard.SendKeys(uIHelpMenuItem, this.RecordedMethod9Params.UIHelpMenuItemSendKeys, ModifierKeys.None);

            // Type '{Right}' in 'File' menu item
            Keyboard.SendKeys(uIFileMenuItem, this.RecordedMethod9Params.UIFileMenuItemSendKeys2, ModifierKeys.None);

            // Click 'Help' -> 'Easter Eggs' -> 'Background' -> 'Red' menu item
            Mouse.Click(uIRedMenuItem, new Point(0, 0));

            // Type '{LMenu}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.RecordedMethod9Params.UIText_EditorEditSendKeys1, ModifierKeys.None);

            // Type '{Right}' in 'File' -> 'Close' menu item
            Keyboard.SendKeys(uICloseMenuItem, this.RecordedMethod9Params.UICloseMenuItemSendKeys, ModifierKeys.None);

            // Type '{Down}{Enter}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.RecordedMethod9Params.UIText_EditorEditSendKeys2, ModifierKeys.None);

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // Type 'Alt + {F4}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.RecordedMethod9Params.UIText_EditorEditSendKeys3, ModifierKeys.Alt);
        }
        
        /// <summary>
        /// Simple navigation and one cell set to FormulaError
        /// </summary>
        public void RecordedMethod10()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIText_EditorEdit = this.UISpreadsheetWindow.UIEntercellcontentsWindow.UIText_EditorEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\base2\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod10Params.UISpreadsheetWindowExePath, this.RecordedMethod10Params.UISpreadsheetWindowAlternateExePath);

            // Type '{Down}{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Up}{Up}{Up}{Up}{Up}{Left}{Left}{Left}{Down}{Down}{Right}=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod10Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '=a1' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.RecordedMethod10Params.UIText_EditorEditText;

            // Type '{Enter}' in 'Text_Editor' text box
            Keyboard.SendKeys(uIText_EditorEdit, this.RecordedMethod10Params.UIText_EditorEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(19, 13));
        }
        
        /// <summary>
        /// Check we are in cell C4
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinText uIC4Text = this.UISpreadsheetWindow.UIC4Window.UIC4Text;
            #endregion

            // Verify that the 'DisplayText' property of 'C4' label equals 'C4'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIC4TextDisplayText, uIC4Text.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod11 - Use 'RecordedMethod11Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod11()
        {
            #region Variable Declarations
            WinMenuItem uIGreenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIEasterEggsMenuItem.UIBackgroundMenuItem.UIGreenMenuItem;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIText_EditorEdit = this.UISpreadsheetWindow.UIEntercellcontentsWindow.UIText_EditorEdit;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\base2\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod11Params.UISpreadsheetWindowExePath, this.RecordedMethod11Params.UISpreadsheetWindowAlternateExePath);

            // Click 'Help' -> 'Easter Eggs' -> 'Background' -> 'Green' menu item
            Mouse.Click(uIGreenMenuItem, new Point(57, 8));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(147, 53));

            // Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod11Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(552, 206));

            // Type '5' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod11Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.RecordedMethod11Params.UIText_EditorEditText;

            // Type '7' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod11Params.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.RecordedMethod11Params.UIText_EditorEditText1;

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod11Params.UISpreadsheetPanel1ClientSendKeys3, ModifierKeys.None);

            // Type 'Enter cell contents' in 'Text_Editor' text box
            uIText_EditorEdit.Text = this.RecordedMethod11Params.UIText_EditorEditText2;

            // Type '{Up}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod11Params.UISpreadsheetPanel1ClientSendKeys4, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uIText_EditorEdit1 = this.UISpreadsheetWindow.UIEntercellcontentsWindow.UIText_EditorEdit1;
            WinText uIItem12Text = this.UISpreadsheetWindow.UIFormulaERRWindow.UIItem12Text;
            #endregion

            // Verify that the 'Text' property of 'Text_Editor' text box equals '=N60+N61'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIText_EditorEdit1Text, uIText_EditorEdit1.Text);

            // Verify that the 'DisplayText' property of '12' label equals '12'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIItem12TextDisplayText, uIItem12Text.DisplayText);
        }
        
        #region Properties
        public virtual GeneralUseTest1Params GeneralUseTest1Params
        {
            get
            {
                if ((this.mGeneralUseTest1Params == null))
                {
                    this.mGeneralUseTest1Params = new GeneralUseTest1Params();
                }
                return this.mGeneralUseTest1Params;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public virtual RecordedMethod7Params RecordedMethod7Params
        {
            get
            {
                if ((this.mRecordedMethod7Params == null))
                {
                    this.mRecordedMethod7Params = new RecordedMethod7Params();
                }
                return this.mRecordedMethod7Params;
            }
        }
        
        public virtual RecordedMethod8Params RecordedMethod8Params
        {
            get
            {
                if ((this.mRecordedMethod8Params == null))
                {
                    this.mRecordedMethod8Params = new RecordedMethod8Params();
                }
                return this.mRecordedMethod8Params;
            }
        }
        
        public virtual RecordedMethod9Params RecordedMethod9Params
        {
            get
            {
                if ((this.mRecordedMethod9Params == null))
                {
                    this.mRecordedMethod9Params = new RecordedMethod9Params();
                }
                return this.mRecordedMethod9Params;
            }
        }
        
        public virtual RecordedMethod10Params RecordedMethod10Params
        {
            get
            {
                if ((this.mRecordedMethod10Params == null))
                {
                    this.mRecordedMethod10Params = new RecordedMethod10Params();
                }
                return this.mRecordedMethod10Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod11Params RecordedMethod11Params
        {
            get
            {
                if ((this.mRecordedMethod11Params == null))
                {
                    this.mRecordedMethod11Params = new RecordedMethod11Params();
                }
                return this.mRecordedMethod11Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIWarningWindow UIWarningWindow
        {
            get
            {
                if ((this.mUIWarningWindow == null))
                {
                    this.mUIWarningWindow = new UIWarningWindow();
                }
                return this.mUIWarningWindow;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIItemWindow13 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow13();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111();
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UIViewDownloadsInterneWindow UIViewDownloadsInterneWindow
        {
            get
            {
                if ((this.mUIViewDownloadsInterneWindow == null))
                {
                    this.mUIViewDownloadsInterneWindow = new UIViewDownloadsInterneWindow();
                }
                return this.mUIViewDownloadsInterneWindow;
            }
        }
        
        public UITrayInputIndicatorWindow UITrayInputIndicatorWindow
        {
            get
            {
                if ((this.mUITrayInputIndicatorWindow == null))
                {
                    this.mUITrayInputIndicatorWindow = new UITrayInputIndicatorWindow();
                }
                return this.mUITrayInputIndicatorWindow;
            }
        }
        #endregion
        
        #region Fields
        private GeneralUseTest1Params mGeneralUseTest1Params;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private RecordedMethod7Params mRecordedMethod7Params;
        
        private RecordedMethod8Params mRecordedMethod8Params;
        
        private RecordedMethod9Params mRecordedMethod9Params;
        
        private RecordedMethod10Params mRecordedMethod10Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod11Params mRecordedMethod11Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIWarningWindow mUIWarningWindow;
        
        private UIOKWindow1 mUIOKWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIItemWindow13 mUIItemWindow1;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UIViewDownloadsInterneWindow mUIViewDownloadsInterneWindow;
        
        private UITrayInputIndicatorWindow mUITrayInputIndicatorWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GeneralUseTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GeneralUseTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Kearsa\\Source\\Repos\\Daniel_Avery\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadShee" +
            "tGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\Daniel_Avery\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadSheetG" +
            "UI.exe";
        
        /// <summary>
        /// Type '1' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "1";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText = "Enter cell contents";
        
        /// <summary>
        /// Type '2' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "2";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText1 = "Enter cell contents";
        
        /// <summary>
        /// Type '3' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys2 = "3";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText2 = "Enter cell contents";
        
        /// <summary>
        /// Type '4' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys3 = "4";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText3 = "Enter cell contents";
        
        /// <summary>
        /// Type '5' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys4 = "5";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText4 = "Enter cell contents";
        
        /// <summary>
        /// Type '6' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys5 = "6";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText5 = "Enter cell contents";
        
        /// <summary>
        /// Type '7' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys6 = "7";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText6 = "Enter cell contents";
        
        /// <summary>
        /// Type '8' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys7 = "8";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText7 = "Enter cell contents";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys8 = "=";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText8 = "Enter cell contents";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys9 = "=";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText9 = "Enter cell contents";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys10 = "=";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText10 = "Enter cell contents";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys11 = "=";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText11 = "Enter cell contents";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys12 = "=";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText12 = "Enter cell contents";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText13 = "Enter cell contents";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText14 = "Enter cell contents";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys13 = "=";
        
        /// <summary>
        /// Type '=a72' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText15 = "=a72";
        
        /// <summary>
        /// Type '{Enter}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys14 = "=";
        
        /// <summary>
        /// Type '=a20' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText16 = "=a20";
        
        /// <summary>
        /// Type '{Enter}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys15 = "=";
        
        /// <summary>
        /// Type '=a100' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText17 = "=a100";
        
        /// <summary>
        /// Type '{Enter}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys16 = "=";
        
        /// <summary>
        /// Type '=c2' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText18 = "=c2";
        
        /// <summary>
        /// Type '{Enter}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Right}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys17 = @"{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Tab}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Right}";
        
        /// <summary>
        /// Type '{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys18 = @"{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText19 = "Enter cell contents";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText20 = "Enter cell contents";
        
        /// <summary>
        /// Type '{NumPad5}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys19 = "{NumPad5}";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText21 = "Enter cell contents";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys20 = "=";
        
        /// <summary>
        /// Type '=i10e3' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText22 = "=i10e3";
        
        /// <summary>
        /// Type '{Enter}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '{Up}=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys21 = "{Up}=";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText23 = "Enter cell contents";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'FirstTest.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "FirstTest.sprd";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Up}{Delete}{Up}{Delete}{Up}{Delete}{Left}{Delete}{Down}{Delete}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Right}{Delete}{Down}{Delete}{Down}{Delete}{Down}{Delete}{Down}{Delete}{Down}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = @"{Up}{Delete}{Up}{Delete}{Up}{Delete}{Left}{Delete}{Down}{Delete}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Up}{Delete}{Right}{Delete}{Down}{Delete}{Down}{Delete}{Down}{Delete}{Down}{Delete}{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Kearsa\\Source\\Repos\\Daniel_Avery\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadShee" +
            "tGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\Daniel_Avery\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadSheetG" +
            "UI.exe";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText = "Enter cell contents";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "=";
        
        /// <summary>
        /// Type '=a3' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText1 = "=a3";
        
        /// <summary>
        /// Type '{Enter}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "5";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText2 = "Enter cell contents";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText3 = "Enter cell contents";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys2 = "=";
        
        /// <summary>
        /// Type '=a5 + 3 / 5 * 9' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText4 = "=a5 + 3 / 5 * 9";
        
        /// <summary>
        /// Type '{Enter}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys3 = "{Enter}{Enter}";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText5 = "Enter cell contents";
        
        /// <summary>
        /// Select 'SecondTestMethod.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "SecondTestMethod.sprd";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Kearsa\\Source\\Repos\\Daniel_Avery\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadShee" +
            "tGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\Daniel_Avery\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadSheetG" +
            "UI.exe";
        
        /// <summary>
        /// Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = @"{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}";
        
        /// <summary>
        /// Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Do" +
            "wn}{Down}{Down}";
        
        /// <summary>
        /// Type '{Down}{Up}{Down}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys2 = "{Down}{Up}{Down}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left" +
            "}{Left}{Left}{Left}";
        
        /// <summary>
        /// Type '{Left}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys3 = "{Left}";
        
        /// <summary>
        /// Type '{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys4 = @"{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{F4}";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys = "{F4}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Kearsa\\Source\\Repos\\Daniel_Avery\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadShee" +
            "tGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Source\\Repos\\Daniel_Avery\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadSheetG" +
            "UI.exe";
        
        /// <summary>
        /// Type '{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = @"{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}";
        
        /// <summary>
        /// Type '{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Right}{Right}{Right}{Right}{Right}{Right}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = @"{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Right}{Right}{Right}{Right}{Right}{Right}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod7Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + n' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys = "n";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys1 = "{F4}";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "=";
        
        /// <summary>
        /// Type '=a5' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText = "=a5";
        
        /// <summary>
        /// Type '{Enter}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}{Enter}{Enter}3' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "{Enter}{Enter}{Enter}3";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText1 = "Enter cell contents";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys3 = "{F4}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod8Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Kearsa\\Source\\Repos\\Daniel_Avery\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadShee" +
            "tGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\Daniel_Avery\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadSheetG" +
            "UI.exe";
        
        /// <summary>
        /// Type '{Down}{Right}{Down}{Left}{Right}{Up}{Right}{Up}{Right}{Up}{Right}{Up}{Left}{Left}{Left}{Left}{Left}{Down}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Left}{Left}{Left}{Left}{Left}{Left}{Up}{Up}{Up}{Up}{Up}{Up}{Right}{Right}{Up}{Left}{Right}{Up}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = @"{Down}{Right}{Down}{Left}{Right}{Up}{Right}{Up}{Right}{Up}{Right}{Up}{Left}{Left}{Left}{Left}{Left}{Down}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Left}{Left}{Left}{Left}{Left}{Left}{Up}{Up}{Up}{Up}{Up}{Up}{Right}{Right}{Up}{Left}{Right}{Up}";
        
        /// <summary>
        /// Type '{Right}{Up}{Right}{Up}{Right}{Up}{Left}{Right}{Up}{Left}{Right}{Up}{Left}{Right}{Up}{Left}{Right}{Left}{Right}{Down}{Left}{Right}{Down}{Right}{Up}{Left}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "{Right}{Up}{Right}{Up}{Right}{Up}{Left}{Right}{Up}{Left}{Right}{Up}{Left}{Right}{" +
            "Up}{Left}{Right}{Left}{Right}{Down}{Left}{Right}{Down}{Right}{Up}{Left}";
        
        /// <summary>
        /// Type '{Down}{Down}{Down}{Down}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys2 = "{Down}{Down}{Down}{Down}";
        
        /// <summary>
        /// Type '{Right}{Right}{Right}{Right}{Right}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys3 = "{Right}{Right}{Right}{Right}{Right}";
        
        /// <summary>
        /// Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys4 = @"{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}";
        
        /// <summary>
        /// Type '{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys5 = "{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{" +
            "Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{" +
            "Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}";
        
        /// <summary>
        /// Type '{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys6 = "{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Le" +
            "ft}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left" +
            "}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys = "{F4}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod9Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Kearsa\\Source\\Repos\\Daniel_Avery\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadShee" +
            "tGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\Daniel_Avery\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\Daniel_Avery\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadSheetG" +
            "UI.exe";
        
        /// <summary>
        /// Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = @"{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}";
        
        /// <summary>
        /// Type '{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Right}{Right}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{LMenu}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = @"{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Right}{Right}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{LMenu}";
        
        /// <summary>
        /// Type '{Right}' in 'File' menu item
        /// </summary>
        public string UIFileMenuItemSendKeys = "{Right}";
        
        /// <summary>
        /// Type '{LMenu}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys = "{LMenu}";
        
        /// <summary>
        /// Type '{Right}' in 'File' menu item
        /// </summary>
        public string UIFileMenuItemSendKeys1 = "{Right}";
        
        /// <summary>
        /// Type '{Right}' in 'Help' menu item
        /// </summary>
        public string UIHelpMenuItemSendKeys = "{Right}";
        
        /// <summary>
        /// Type '{Right}' in 'File' menu item
        /// </summary>
        public string UIFileMenuItemSendKeys2 = "{Right}";
        
        /// <summary>
        /// Type '{LMenu}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys1 = "{LMenu}";
        
        /// <summary>
        /// Type '{Right}' in 'File' -> 'Close' menu item
        /// </summary>
        public string UICloseMenuItemSendKeys = "{Right}";
        
        /// <summary>
        /// Type '{Down}{Enter}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys2 = "{Down}{Enter}";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys3 = "{F4}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod10Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\base2\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Daniel\\Source\\Repos\\base2\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadSheetGUI.ex" +
            "e";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\base2\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\base2\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadSheetGUI.exe";
        
        /// <summary>
        /// Type '{Down}{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Up}{Up}{Up}{Up}{Up}{Left}{Left}{Left}{Down}{Down}{Right}=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "{Down}{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Up}{Up}{Up}{Up}{Up}{Le" +
            "ft}{Left}{Left}{Down}{Down}{Right}=";
        
        /// <summary>
        /// Type '=a1' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText = "=a1";
        
        /// <summary>
        /// Type '{Enter}' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'C4' label equals 'C4'
        /// </summary>
        public string UIC4TextDisplayText = "C4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod11Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\base2\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Daniel\\Source\\Repos\\base2\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadSheetGUI.ex" +
            "e";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\base2\PS4\SpreadSheetGUI\bin\Debug\SpreadSheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\base2\\PS4\\SpreadSheetGUI\\bin\\Debug\\SpreadSheetGUI.exe";
        
        /// <summary>
        /// Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Do" +
            "wn}{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Rig" +
            "ht}{Right}{Right}{Right}";
        
        /// <summary>
        /// Type '5' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "5";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText = "Enter cell contents";
        
        /// <summary>
        /// Type '7' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys2 = "7";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText1 = "Enter cell contents";
        
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys3 = "=";
        
        /// <summary>
        /// Type 'Enter cell contents' in 'Text_Editor' text box
        /// </summary>
        public string UIText_EditorEditText2 = "Enter cell contents";
        
        /// <summary>
        /// Type '{Up}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys4 = "{Up}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Text_Editor' text box equals '=N60+N61'
        /// </summary>
        public string UIText_EditorEdit1Text = "=N60+N61";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '12' label equals '12'
        /// </summary>
        public string UIItem12TextDisplayText = "12";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UIEntercellcontentsWindow UIEntercellcontentsWindow
        {
            get
            {
                if ((this.mUIEntercellcontentsWindow == null))
                {
                    this.mUIEntercellcontentsWindow = new UIEntercellcontentsWindow(this);
                }
                return this.mUIEntercellcontentsWindow;
            }
        }
        
        public UISpreadsheetClient UISpreadsheetClient
        {
            get
            {
                if ((this.mUISpreadsheetClient == null))
                {
                    this.mUISpreadsheetClient = new UISpreadsheetClient(this);
                }
                return this.mUISpreadsheetClient;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public UIFormulaERRWindow UIFormulaERRWindow
        {
            get
            {
                if ((this.mUIFormulaERRWindow == null))
                {
                    this.mUIFormulaERRWindow = new UIFormulaERRWindow(this);
                }
                return this.mUIFormulaERRWindow;
            }
        }
        
        public UIC4Window UIC4Window
        {
            get
            {
                if ((this.mUIC4Window == null))
                {
                    this.mUIC4Window = new UIC4Window(this);
                }
                return this.mUIC4Window;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UIEntercellcontentsWindow mUIEntercellcontentsWindow;
        
        private UISpreadsheetClient mUISpreadsheetClient;
        
        private UIItemWindow mUIItemWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        
        private UIFormulaERRWindow mUIFormulaERRWindow;
        
        private UIC4Window mUIC4Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIItemWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItemWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        
        private WinWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIEntercellcontentsWindow : WinWindow
    {
        
        public UIEntercellcontentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Text_Editor";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIText_EditorEdit
        {
            get
            {
                if ((this.mUIText_EditorEdit == null))
                {
                    this.mUIText_EditorEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIText_EditorEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIText_EditorEdit;
            }
        }
        
        public WinEdit UIText_EditorEdit1
        {
            get
            {
                if ((this.mUIText_EditorEdit1 == null))
                {
                    this.mUIText_EditorEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIText_EditorEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "12";
                    this.mUIText_EditorEdit1.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIText_EditorEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIText_EditorEdit;
        
        private WinEdit mUIText_EditorEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetClient : WinClient
    {
        
        public UISpreadsheetClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Spreadsheet";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinWindow UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIMenuStrip1Window.SearchProperties[WinWindow.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIMenuStrip1Window.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public WinWindow UIEntercellcontentsWindow
        {
            get
            {
                if ((this.mUIEntercellcontentsWindow == null))
                {
                    this.mUIEntercellcontentsWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIEntercellcontentsWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Enter cell contents";
                    this.mUIEntercellcontentsWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIEntercellcontentsWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIEntercellcontentsWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIMenuStrip1Window;
        
        private WinWindow mUIEntercellcontentsWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIAboutSpreadsheetMenuItem
        {
            get
            {
                if ((this.mUIAboutSpreadsheetMenuItem == null))
                {
                    this.mUIAboutSpreadsheetMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutSpreadsheetMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About Spreadsheet";
                    this.mUIAboutSpreadsheetMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutSpreadsheetMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIAboutSpreadsheetMenuItem;
            }
        }
        
        public WinMenuItem UIRequestSupportMenuItem
        {
            get
            {
                if ((this.mUIRequestSupportMenuItem == null))
                {
                    this.mUIRequestSupportMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRequestSupportMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Request Support";
                    this.mUIRequestSupportMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIRequestSupportMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIRequestSupportMenuItem;
            }
        }
        
        public UIEasterEggsMenuItem UIEasterEggsMenuItem
        {
            get
            {
                if ((this.mUIEasterEggsMenuItem == null))
                {
                    this.mUIEasterEggsMenuItem = new UIEasterEggsMenuItem(this);
                }
                return this.mUIEasterEggsMenuItem;
            }
        }
        
        public UIEasterEggsMenuItem1 UIEasterEggsMenuItem1
        {
            get
            {
                if ((this.mUIEasterEggsMenuItem1 == null))
                {
                    this.mUIEasterEggsMenuItem1 = new UIEasterEggsMenuItem1(this);
                }
                return this.mUIEasterEggsMenuItem1;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIAboutSpreadsheetMenuItem;
        
        private WinMenuItem mUIRequestSupportMenuItem;
        
        private UIEasterEggsMenuItem mUIEasterEggsMenuItem;
        
        private UIEasterEggsMenuItem1 mUIEasterEggsMenuItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIEasterEggsMenuItem : WinMenuItem
    {
        
        public UIEasterEggsMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Easter Eggs";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIBackgroundMenuItem UIBackgroundMenuItem
        {
            get
            {
                if ((this.mUIBackgroundMenuItem == null))
                {
                    this.mUIBackgroundMenuItem = new UIBackgroundMenuItem(this);
                }
                return this.mUIBackgroundMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBackgroundMenuItem mUIBackgroundMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIBackgroundMenuItem : WinMenuItem
    {
        
        public UIBackgroundMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Background";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIGreenMenuItem
        {
            get
            {
                if ((this.mUIGreenMenuItem == null))
                {
                    this.mUIGreenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIGreenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Green";
                    this.mUIGreenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIGreenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIGreenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIGreenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIEasterEggsMenuItem1 : WinMenuItem
    {
        
        public UIEasterEggsMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Easter Eggs";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIBackgroundMenuItem1 UIBackgroundMenuItem
        {
            get
            {
                if ((this.mUIBackgroundMenuItem == null))
                {
                    this.mUIBackgroundMenuItem = new UIBackgroundMenuItem1(this);
                }
                return this.mUIBackgroundMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBackgroundMenuItem1 mUIBackgroundMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIBackgroundMenuItem1 : WinMenuItem
    {
        
        public UIBackgroundMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Background";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIWhiteMenuItem
        {
            get
            {
                if ((this.mUIWhiteMenuItem == null))
                {
                    this.mUIWhiteMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIWhiteMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "White";
                    this.mUIWhiteMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIWhiteMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIWhiteMenuItem;
            }
        }
        
        public WinMenuItem UIRedMenuItem
        {
            get
            {
                if ((this.mUIRedMenuItem == null))
                {
                    this.mUIRedMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRedMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Red";
                    this.mUIRedMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIRedMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIRedMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIWhiteMenuItem;
        
        private WinMenuItem mUIRedMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFormulaERRWindow : WinWindow
    {
        
        public UIFormulaERRWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Value_Box";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIFormulaERRText
        {
            get
            {
                if ((this.mUIFormulaERRText == null))
                {
                    this.mUIFormulaERRText = new WinText(this);
                    #region Search Criteria
                    this.mUIFormulaERRText.SearchProperties[WinText.PropertyNames.Name] = "FormulaERR";
                    this.mUIFormulaERRText.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIFormulaERRText;
            }
        }
        
        public WinText UIItem12Text
        {
            get
            {
                if ((this.mUIItem12Text == null))
                {
                    this.mUIItem12Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem12Text.SearchProperties[WinText.PropertyNames.Name] = "12";
                    this.mUIItem12Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItem12Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIFormulaERRText;
        
        private WinText mUIItem12Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIC4Window : WinWindow
    {
        
        public UIC4Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Cell_Box";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIC4Text
        {
            get
            {
                if ((this.mUIC4Text == null))
                {
                    this.mUIC4Text = new WinText(this);
                    #region Search Criteria
                    this.mUIC4Text.SearchProperties[WinText.PropertyNames.Name] = "C4";
                    this.mUIC4Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIC4Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIC4Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            #endregion
        }
        
        #region Properties
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIWarningWindow : WinWindow
    {
        
        public UIWarningWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinControl UIWarningDialog
        {
            get
            {
                if ((this.mUIWarningDialog == null))
                {
                    this.mUIWarningDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIWarningDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Warning";
                    this.mUIWarningDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIWarningDialog.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUIWarningDialog;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIWarningDialog;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemsViewWindow UIItemsViewWindow
        {
            get
            {
                if ((this.mUIItemsViewWindow == null))
                {
                    this.mUIItemsViewWindow = new UIItemsViewWindow(this);
                }
                return this.mUIItemsViewWindow;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5(this);
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIItemWindow6 UIItemWindow6
        {
            get
            {
                if ((this.mUIItemWindow6 == null))
                {
                    this.mUIItemWindow6 = new UIItemWindow6(this);
                }
                return this.mUIItemWindow6;
            }
        }
        
        public UIItemWindow7 UIItemWindow7
        {
            get
            {
                if ((this.mUIItemWindow7 == null))
                {
                    this.mUIItemWindow7 = new UIItemWindow7(this);
                }
                return this.mUIItemWindow7;
            }
        }
        
        public UIItemWindow8 UIItemWindow8
        {
            get
            {
                if ((this.mUIItemWindow8 == null))
                {
                    this.mUIItemWindow8 = new UIItemWindow8(this);
                }
                return this.mUIItemWindow8;
            }
        }
        
        public UIItemWindow9 UIItemWindow9
        {
            get
            {
                if ((this.mUIItemWindow9 == null))
                {
                    this.mUIItemWindow9 = new UIItemWindow9(this);
                }
                return this.mUIItemWindow9;
            }
        }
        
        public UITreeViewWindow1 UITreeViewWindow1
        {
            get
            {
                if ((this.mUITreeViewWindow1 == null))
                {
                    this.mUITreeViewWindow1 = new UITreeViewWindow1(this);
                }
                return this.mUITreeViewWindow1;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow10 UIItemWindow10
        {
            get
            {
                if ((this.mUIItemWindow10 == null))
                {
                    this.mUIItemWindow10 = new UIItemWindow10(this);
                }
                return this.mUIItemWindow10;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemsViewWindow mUIItemsViewWindow;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIItemWindow6 mUIItemWindow6;
        
        private UIItemWindow7 mUIItemWindow7;
        
        private UIItemWindow8 mUIItemWindow8;
        
        private UIItemWindow9 mUIItemWindow9;
        
        private UITreeViewWindow1 mUITreeViewWindow1;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow10 mUIItemWindow10;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDesktopTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new UIDesktopTreeItem(this);
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDesktopTreeItem : WinTreeItem
    {
        
        public UIDesktopTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIThisPCTreeItem
        {
            get
            {
                if ((this.mUIThisPCTreeItem == null))
                {
                    this.mUIThisPCTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIThisPCTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "This PC";
                    this.mUIThisPCTreeItem.SearchProperties["Value"] = "1";
                    this.mUIThisPCTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIThisPCTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIThisPCTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIThisPCTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIThisPCTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UILocalDiskCListItem UILocalDiskCListItem
        {
            get
            {
                if ((this.mUILocalDiskCListItem == null))
                {
                    this.mUILocalDiskCListItem = new UILocalDiskCListItem(this);
                }
                return this.mUILocalDiskCListItem;
            }
        }
        #endregion
        
        #region Fields
        private UILocalDiskCListItem mUILocalDiskCListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UILocalDiskCListItem : WinListItem
    {
        
        public UILocalDiskCListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Local Disk (C:)";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UISpaceusedEdit
        {
            get
            {
                if ((this.mUISpaceusedEdit == null))
                {
                    this.mUISpaceusedEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISpaceusedEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Space used";
                    this.mUISpaceusedEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISpaceusedEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISpaceusedEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIUsersListItem UIUsersListItem
        {
            get
            {
                if ((this.mUIUsersListItem == null))
                {
                    this.mUIUsersListItem = new UIUsersListItem(this);
                }
                return this.mUIUsersListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUsersListItem mUIUsersListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIUsersListItem : WinListItem
    {
        
        public UIUsersListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Users";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIKearsaListItem UIKearsaListItem
        {
            get
            {
                if ((this.mUIKearsaListItem == null))
                {
                    this.mUIKearsaListItem = new UIKearsaListItem(this);
                }
                return this.mUIKearsaListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIKearsaListItem mUIKearsaListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIKearsaListItem : WinListItem
    {
        
        public UIKearsaListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Kearsa";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UISourceListItem UISourceListItem
        {
            get
            {
                if ((this.mUISourceListItem == null))
                {
                    this.mUISourceListItem = new UISourceListItem(this);
                }
                return this.mUISourceListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISourceListItem mUISourceListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISourceListItem : WinListItem
    {
        
        public UISourceListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Source";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemsViewWindow : WinWindow
    {
        
        public UIItemsViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemsViewList.SearchProperties[WinList.PropertyNames.Name] = "Items View";
                    this.mUIItemsViewList.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIReposListItem UIReposListItem
        {
            get
            {
                if ((this.mUIReposListItem == null))
                {
                    this.mUIReposListItem = new UIReposListItem(this);
                }
                return this.mUIReposListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIReposListItem mUIReposListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIReposListItem : WinListItem
    {
        
        public UIReposListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Repos";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDaniel_AveryListItem UIDaniel_AveryListItem
        {
            get
            {
                if ((this.mUIDaniel_AveryListItem == null))
                {
                    this.mUIDaniel_AveryListItem = new UIDaniel_AveryListItem(this);
                }
                return this.mUIDaniel_AveryListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDaniel_AveryListItem mUIDaniel_AveryListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDaniel_AveryListItem : WinListItem
    {
        
        public UIDaniel_AveryListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Daniel_Avery";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIPS4ListItem UIPS4ListItem
        {
            get
            {
                if ((this.mUIPS4ListItem == null))
                {
                    this.mUIPS4ListItem = new UIPS4ListItem(this);
                }
                return this.mUIPS4ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPS4ListItem mUIPS4ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIPS4ListItem : WinListItem
    {
        
        public UIPS4ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "PS4";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetTestsListItem UISpreadsheetTestsListItem
        {
            get
            {
                if ((this.mUISpreadsheetTestsListItem == null))
                {
                    this.mUISpreadsheetTestsListItem = new UISpreadsheetTestsListItem(this);
                }
                return this.mUISpreadsheetTestsListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetTestsListItem mUISpreadsheetTestsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetTestsListItem : WinListItem
    {
        
        public UISpreadsheetTestsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetTests";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow8 : WinWindow
    {
        
        public UIItemWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIBinListItem UIBinListItem
        {
            get
            {
                if ((this.mUIBinListItem == null))
                {
                    this.mUIBinListItem = new UIBinListItem(this);
                }
                return this.mUIBinListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBinListItem mUIBinListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIBinListItem : WinListItem
    {
        
        public UIBinListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bin";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow9 : WinWindow
    {
        
        public UIItemWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDebugListItem UIDebugListItem
        {
            get
            {
                if ((this.mUIDebugListItem == null))
                {
                    this.mUIDebugListItem = new UIDebugListItem(this);
                }
                return this.mUIDebugListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDebugListItem mUIDebugListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDebugListItem : WinListItem
    {
        
        public UIDebugListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Debug";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITreeViewWindow1 : WinWindow
    {
        
        public UITreeViewWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new WinTree(this);
                    #region Search Criteria
                    this.mUITreeViewTree.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private WinTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow10 : WinWindow
    {
        
        public UIItemWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow12 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow12(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemsViewWindow1 UIItemsViewWindow
        {
            get
            {
                if ((this.mUIItemsViewWindow == null))
                {
                    this.mUIItemsViewWindow = new UIItemsViewWindow1(this);
                }
                return this.mUIItemsViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow12 mUIItemWindow;
        
        private UIItemsViewWindow1 mUIItemsViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIFirstTestsprdListItem UIFirstTestsprdListItem
        {
            get
            {
                if ((this.mUIFirstTestsprdListItem == null))
                {
                    this.mUIFirstTestsprdListItem = new UIFirstTestsprdListItem(this);
                }
                return this.mUIFirstTestsprdListItem;
            }
        }
        
        public UIItemsViewList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new UIItemsViewList(this);
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private UIFirstTestsprdListItem mUIFirstTestsprdListItem;
        
        private UIItemsViewList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFirstTestsprdListItem : WinListItem
    {
        
        public UIFirstTestsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "FirstTest.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemsViewList : WinList
    {
        
        public UIItemsViewList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinListItem UIFirstTestsprdListItem
        {
            get
            {
                if ((this.mUIFirstTestsprdListItem == null))
                {
                    this.mUIFirstTestsprdListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIFirstTestsprdListItem.SearchProperties[WinListItem.PropertyNames.Name] = "FirstTest.sprd";
                    this.mUIFirstTestsprdListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFirstTestsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIFirstTestsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemsViewWindow1 : WinWindow
    {
        
        public UIItemsViewWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemsViewList.SearchProperties[WinList.PropertyNames.Name] = "Items View";
                    this.mUIItemsViewList.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Easter EggsDropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "HelpDropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIEntercellcontentsWindow1 UIEntercellcontentsWindow
        {
            get
            {
                if ((this.mUIEntercellcontentsWindow == null))
                {
                    this.mUIEntercellcontentsWindow = new UIEntercellcontentsWindow1(this);
                }
                return this.mUIEntercellcontentsWindow;
            }
        }
        
        public UISpreadsheetPanel1Window1 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window1(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISpreadsheetClient1 UISpreadsheetClient
        {
            get
            {
                if ((this.mUISpreadsheetClient == null))
                {
                    this.mUISpreadsheetClient = new UISpreadsheetClient1(this);
                }
                return this.mUISpreadsheetClient;
            }
        }
        
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIEntercellcontentsWindow1 mUIEntercellcontentsWindow;
        
        private UISpreadsheetPanel1Window1 mUISpreadsheetPanel1Window;
        
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UISpreadsheetClient1 mUISpreadsheetClient;
        
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIEntercellcontentsWindow1 : WinWindow
    {
        
        public UIEntercellcontentsWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Text_Editor";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIText_EditorEdit
        {
            get
            {
                if ((this.mUIText_EditorEdit == null))
                {
                    this.mUIText_EditorEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIText_EditorEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIText_EditorEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIText_EditorEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetPanel1Window1 : WinWindow
    {
        
        public UISpreadsheetPanel1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetClient1 : WinClient
    {
        
        public UISpreadsheetClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Spreadsheet";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinWindow UIUnhandledexceptionhaWindow
        {
            get
            {
                if ((this.mUIUnhandledexceptionhaWindow == null))
                {
                    this.mUIUnhandledexceptionhaWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIUnhandledexceptionhaWindow.SearchProperties[WinWindow.PropertyNames.Name] = @"Unhandled exception has occurred in your application. If you click Continue, the application will ignore this error and attempt to continue. If you click Quit, the application will close immediately.

Value of '-1' is not valid for 'Value'. 'Value' should be between 'minimum' and 'maximum'.
Parameter name: Value.";
                    this.mUIUnhandledexceptionhaWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIUnhandledexceptionhaWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIUnhandledexceptionhaWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIUnhandledexceptionhaWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    this.mUIMaximizeButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIMaximizeButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIViewDownloadsInterneWindow : WinWindow
    {
        
        public UIViewDownloadsInterneWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "View Downloads - Internet Explorer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("View Downloads - Internet Explorer");
            #endregion
        }
        
        #region Properties
        public UIViewDownloadsInterneTitleBar UIViewDownloadsInterneTitleBar
        {
            get
            {
                if ((this.mUIViewDownloadsInterneTitleBar == null))
                {
                    this.mUIViewDownloadsInterneTitleBar = new UIViewDownloadsInterneTitleBar(this);
                }
                return this.mUIViewDownloadsInterneTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIViewDownloadsInterneTitleBar mUIViewDownloadsInterneTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIViewDownloadsInterneTitleBar : WinTitleBar
    {
        
        public UIViewDownloadsInterneTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("View Downloads - Internet Explorer");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("View Downloads - Internet Explorer");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITrayInputIndicatorWindow : WinWindow
    {
        
        public UITrayInputIndicatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Tray Input Indicator";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TrayInputIndicatorWClass";
            this.WindowTitles.Add("Tray Input Indicator");
            #endregion
        }
        
        #region Properties
        public UIItemWindow14 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow14(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow14 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow14 : WinWindow
    {
        
        public UIItemWindow14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "101";
            this.WindowTitles.Add("Tray Input Indicator");
            #endregion
        }
        
        #region Properties
        public WinButton UIENGButton
        {
            get
            {
                if ((this.mUIENGButton == null))
                {
                    this.mUIENGButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIENGButton.SearchProperties[WinButton.PropertyNames.Name] = "ENG";
                    this.mUIENGButton.WindowTitles.Add("Tray Input Indicator");
                    #endregion
                }
                return this.mUIENGButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIENGButton;
        #endregion
    }
}
